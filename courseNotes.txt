The feeling of safety. 

TDD Intro

Feedback door: ! and ? 

Kanban wall: request (for questions)

Classes resist transition from one client to two, test is the second client.

c2.com TestDrivenDevelopment

Which languages who uses. Starting w/o framework is perfectly acceptable. 

The "point neighborhood" example

Obvious solution or constant, then refactor or triangulate. 

Varying step size and size of feature to test.

TDD Stack

Aversion therapy - hit your hand.

Ping-pong TDD: A writes a test, B makes it pass, B writes a test, A ...

Before start coding make a list of tests we're going to make and choose one to start.

Test isolation: 
- initialisation
- one bug breaking multiple tests

Repeatable tests - only changing production code or data shall change tests behaviour.

Before adding code make sure tests pass. 

Now practising writing less code to satisfy tests. Removing code so that tests still run. 

Ratchet effect - why do we move forward in small steps.

Add new behaviour parallel to existing and tested old one. Make sure the addition didn't break the old code. 
Then start using the new variables. Then remove unused old variables.

"The customer will understand." 

"Bugs" are "mistakes" nowadays.

85% code coverage is ok. 

You're adults, I can't force you, you decide and execute.

Jasmine Javascript BDD framework 

Arrange Act Assert - make it clear, which action we're checking.

"" bar code will lead to strange message "No product for barcode "

Who's broken if A calling B results in NPE thrown? Depends on how close their developers are.

Tests in a separate package to force usable interface of SUT.

The call from Pos to Display appears after there're two "product found" tests and there's a REAL need to pass data between the two.

Remove duplication after tests pass. Code duplication and data duplication. Between production code and test code.

Dragging selection in Eclipse is a nice feature. Eclipse: run last application checkbox and run JUnit on the project. 

Dreyfus model of skill acqusition

Sale Map Display === Controller Model View???

Architecture without trying.

Mechanical and Intuitive design (from jbrains.ca "becoming an accomplished software designer")

Konkretnoe dolzhno zavisetj ot abstraktnogo, a ne naoborot. 

Book Chess: 5334 problems... by Polgar

Addition to the POS task: tax 5% G or 8% GP, show price w/o tax, after "Total" with tax; multiple items in one sale ("Total" signals the end); printing receipt. 

jbrains.ca: "Adding behavior with confidence"

Book: MIchael Feathers "Working effectively with legacy code" 

-----------------------------------

XHtmlUnit - give data transfer objects to web view and check whether specific values appeared in specific span's.

Duplication is also calling same method or using same class for two different reasons. 

Don't write tests that talk to ApplicationContext? Dependency direction problem

Teamwork: each working on a particular feature (as opposed to layer), talk together 1.5h/week looking at fresh code. 

Presenter first - Agile 2006 paper: 
- we assume MVC architecture from our experience
- we implement the controller requiring some behavior from model and view, these contracts expressed as interface 
- we let their interfaces emerge, using mocks 
- then we create model and view implementations, testing their conformance to the contracts
- it's a reusable architecture shortcut practise has tought us is safe

Forward internet group has an environment requiring no TDD: forward.co.uk

Why TDD: 
- cost of failure
- cost of loosing trust of customers
- learning good design

New classes may be nested in the test class for the beginning. 

Google "Feature injection" 

The 30 seconds version is ...

toString() improves readability of jMock tests.

Eclipse:
- inverse color scheme 
- context menu invocation keyboard shortcut

Open Source TDD project examples? 

Code smell leads you to a hypothesis. Write more tests to gather more evidence and confirm or disprove it. 

Setup JUnit & mock libraries beforehand!

Isolated vs Integrated tests:
- Isolated: testing a class against stubs implementing the contracts. This way it's easier to notice responsibilities scattered improperly over the system. It will feel as testing pain. 
- Integrated: using implementations of used classes. Recommended in the beginning to learn better design. In long run requires 
much more prudent duplication removal and naming, since it's possible for responsibilities to spread over many classes unnoticed.

Collections.singletonMap(); 

Cucumber - elegance of BDD!

=================================================================================

J.B. notes and other: 

Reading
http://c2.com/cgi/wiki?TestDrivenDevelopment
http://blog.thecodewhisperer.com/2010/01/14/what-your-tests-dont-need-to-know-will-hurt-you
http://c2.com/cgi/wiki?ArrangeActAssert
http://pivotal.github.com/jasmine/
http://www.jbrains.ca/permalink/how-test-driven-development-works-and-more
http://junit.sourceforge.net/doc/faq/faq.htm#best_3
http://www.jbrains.ca/permalink/becoming-an-accomplished-software-designer
http://www.librarything.com/profile/jbrains
http://blog.thecodewhisperer.com/2011/06/22/adding-behavior-with-confidence/
http://www.atomicobject.com/files/PresenterFirstAgile2006.pdf
http://c2.com/cgi/wiki?ValueObject
http://www.tvagile.com/2011/10/13/evolutionary-design-illustrated/
http://xunitpatterns.com/



Coding
https://github.com/sweer/jb-tdd
https://github.com/jbrains/IntroToTdd-Vilnius-October2011
http://docs.mockito.googlecode.com/hg/latest/org/mockito/Mockito.html

Concepts
Which test will force me to write the code that I think I need to write?
Before writing a test, make a list of the tests you might need
Ping-Pong pair programming
Tests should be isolated from each other: if one fails, the rest should still run sensibly
Tests should be repeatable: only changing the production code or data should change the result of a test
Begin a test with the thing you want to check (assertion first)
Check one thing at a time (one assertion per test)
Worry about one thing at a time (one action per test)
Triangulation
Make similarity more similar, to make it easier to remove duplication
If you can't remove duplication, move the copies closer together
A Guard Clause can be a sign that two responsibilities should be separated
If you can't decide how to improve the design, try writing more tests
Context independence: an object should know as little as possible about its surroundings; related to Dependency Inversion Principle: concrete things should depend on abstract things, but abstract things should not depend on concrete things

